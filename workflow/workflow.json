{
  "name": "My workflow",
  "nodes": [
    {
      "parameters": {},
      "id": "fcef12cc-763b-4c3a-9162-72ffd5a91829",
      "name": "Merge Results",
      "type": "n8n-nodes-base.merge",
      "typeVersion": 2.1,
      "position": [
        672,
        176
      ]
    },
    {
      "parameters": {
        "jsCode": "// Parse ibomma search results\nconst html = $json.data;\nconst query = $node[\"Extract Parameters\"].json.query.toLowerCase();\n\nif (!html) {\n  return [{ error: 'No HTML data received from ibomma' }];\n}\n\nconsole.log(`Parsing ibomma results for: ${query}`);\n\nconst movies = [];\nconst baseUrl = 'https://search_x.ibomma.foo';\n\ntry {\n  const movieElementPatterns = [\n    /<div[^>]*class=\"[^\"]*(?:movie|film|item|card|post|entry|result)[^\"]*\"[^>]*>([\\s\\S]*?)<\\/div>/gi,\n    /<article[^>]*>([\\s\\S]*?)<\\/article>/gi,\n    /<li[^>]*>([\\s\\S]*?)<\\/li>/gi,\n    /<div[^>]*class=\"[^\"]*\"[^>]*>([\\s\\S]*?)<\\/div>/gi\n  ];\n  \n  let movieMatches = [];\n  for (const pattern of movieElementPatterns) {\n    movieMatches = [...html.matchAll(pattern)];\n    if (movieMatches.length > 0) break;\n  }\n  \n  console.log(`Found ${movieMatches.length} movie elements`);\n  \n  for (let i = 0; i < movieMatches.length; i++) {\n    const movieHtml = movieMatches[i][1] || movieMatches[i][0];\n    \n    const elementText = movieHtml.toLowerCase();\n    if (!elementText.includes(query) && query.length >= 3) {\n      continue;\n    }\n    \n    const linkMatches = [...movieHtml.matchAll(/<a[^>]*href=\"([^\"]+)\"[^>]*>/gi)];\n    \n    for (const linkMatch of linkMatches) {\n      const href = linkMatch[1];\n      if (href && !href.startsWith('#') && !href.startsWith('javascript:')) {\n        \n        const fullUrl = href.startsWith('http') ? href : baseUrl + (href.startsWith('/') ? '' : '/') + href;\n        \n        if (!movies.some(m => m.url === fullUrl)) {\n          let title = query.charAt(0).toUpperCase() + query.slice(1);\n          let year = '';\n          \n          // Extract title from URL\n          try {\n            const urlParts = fullUrl.split('/');\n            const lastPart = urlParts[urlParts.length - 1];\n            if (lastPart && lastPart.includes('-')) {\n              const titleParts = lastPart.split('-');\n              if (titleParts.length > 0) {\n                title = titleParts[0].replace(/[_]/g, ' ').trim();\n                title = title.charAt(0).toUpperCase() + title.slice(1);\n              }\n              \n              for (const part of titleParts) {\n                if (/^\\d{4}$/.test(part)) {\n                  year = part;\n                  break;\n                }\n              }\n            }\n          } catch (e) {}\n          \n          movies.push({\n            title: title,\n            year: year,\n            language: 'Telugu',\n            poster: '',\n            url: fullUrl,\n            source: 'ibomma.foo',\n            rank: movies.length + 1\n          });\n          \n          if (movies.length >= 3) break;\n        }\n      }\n    }\n    \n    if (movies.length >= 3) break;\n  }\n  \n  console.log(`Ibomma found ${movies.length} movies`);\n  return movies;\n  \n} catch (error) {\n  console.log('Ibomma parsing error:', error.message);\n  return [{ error: 'Ibomma parsing failed' }];\n}"
      },
      "id": "35633a5d-8ca9-4aff-8cf2-4fe15cc9618a",
      "name": "Parse Ibomma",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        448,
        304
      ]
    },
    {
      "parameters": {
        "jsCode": "// Parse movie search results from 5movierulz.chat - Fixed for n8n \"Run Once for Each Item\"\nconst html = $json.data;\nconst query = $node[\"Extract Parameters\"].json.query.toLowerCase();\n\nif (!html) {\n  return [{ error: 'No HTML data received' }];\n}\n\nconsole.log(`Parsing search results for query: ${query}`);\n\nconst movies = [];\nconst baseUrl = 'https://www.5movierulz.villas';\n\ntry {\n  // Look for film elements - this is the key selector from working code\n  const filmElementPattern = /<div[^>]*class=\"[^\"]*film[^\"]*\"[^>]*>([\\s\\S]*?)<\\/div>/gi;\n  const filmMatches = [...html.matchAll(filmElementPattern)];\n  \n  console.log(`Found ${filmMatches.length} film elements`);\n  \n  for (let i = 0; i < filmMatches.length; i++) {\n    const filmHtml = filmMatches[i][1] || filmMatches[i][0];\n    \n    try {\n      // Check if this film element contains our query\n      if (!filmHtml.toLowerCase().includes(query)) {\n        continue;\n      }\n      \n      console.log(`Processing film element ${i+1} (contains '${query}')`);\n      \n      // Extract all links from this film element\n      const linkPattern = /<a[^>]*href=\"([^\"]+)\"[^>]*>/gi;\n      const linkMatches = [...filmHtml.matchAll(linkPattern)];\n      \n      // Extract all images from this film element\n      const imgPattern = /<img[^>]*src=\"([^\"]+)\"[^>]*(?:alt=\"([^\"]*)\"|[^>]*)>/gi;\n      const imgMatches = [...filmHtml.matchAll(imgPattern)];\n      \n      // Get all text content to find full titles\n      const textContent = filmHtml.replace(/<[^>]*>/g, ' ').replace(/\\s+/g, ' ').trim();\n      const textLines = textContent.split('\\n').map(line => line.trim()).filter(line => line.length > 0);\n      \n      // Process each link\n      for (let linkIdx = 0; linkIdx < linkMatches.length; linkIdx++) {\n        const linkHref = linkMatches[linkIdx][1];\n        if (!linkHref) continue;\n        \n        let movieTitle = '';\n        let posterUrl = '';\n        \n        // Get corresponding image if available\n        if (linkIdx < imgMatches.length) {\n          const imgSrc = imgMatches[linkIdx][1];\n          const imgAlt = imgMatches[linkIdx][2] || '';\n          \n          if (imgSrc && !imgSrc.startsWith('data:')) {\n            posterUrl = imgSrc.startsWith('http') ? imgSrc : baseUrl + (imgSrc.startsWith('/') ? imgSrc : '/' + imgSrc);\n          }\n          \n          if (imgAlt) {\n            movieTitle = imgAlt;\n          }\n        }\n        \n        // Try to find full title from text content\n        if (!movieTitle) {\n          for (const line of textLines) {\n            const lineLower = line.toLowerCase();\n            // Look for lines that contain query and movie indicators\n            if (lineLower.includes(query) && \n                (line.match(/\\b(19|20)\\d{2}\\b/) || \n                 lineLower.includes('hdrip') || \n                 lineLower.includes('brrip') || \n                 lineLower.includes('movie') || \n                 lineLower.includes('watch'))) {\n              movieTitle = line;\n              console.log(`Found full title: ${movieTitle}`);\n              break;\n            }\n          }\n        }\n        \n        // Fallback: extract from URL\n        if (!movieTitle) {\n          const urlParts = linkHref.split('/');\n          for (const part of urlParts) {\n            if (part.toLowerCase().includes(query)) {\n              movieTitle = part.replace(/-/g, ' ').replace(/movie watch online free/gi, '').trim();\n              break;\n            }\n          }\n        }\n        \n        // Enhance title based on URL patterns (from working code)\n        if (movieTitle && linkHref) {\n          const hrefLower = linkHref.toLowerCase();\n          \n          // Language detection\n          if (hrefLower.includes('malayalam')) {\n            movieTitle = movieTitle.replace(/Movie Watch Online Free/gi, 'Malayalam Movie');\n          } else if (hrefLower.includes('telugu')) {\n            movieTitle = movieTitle.replace(/Movie Watch Online Free/gi, 'Telugu Movie');\n          } else if (hrefLower.includes('tamil')) {\n            movieTitle = movieTitle.replace(/Movie Watch Online Free/gi, 'Tamil Movie');\n          } else if (hrefLower.includes('english')) {\n            movieTitle = movieTitle.replace(/Movie Watch Online Free/gi, 'English Movie');\n          } else if (hrefLower.includes('hindi')) {\n            movieTitle = movieTitle.replace(/Movie Watch Online Free/gi, 'Hindi Movie');\n          }\n          \n          // Specific movie patterns from working code\n          if (hrefLower.includes('rrr-2022')) {\n            movieTitle = 'RRR (2022) BRRip Telugu Movie';\n          } else if (hrefLower.includes('rrr-behind')) {\n            movieTitle = 'RRR: Behind & Beyond (2024) HDRip English Movie';\n          } else if (hrefLower.includes('grrr-2024-malayalam')) {\n            movieTitle = 'Grrr (2024) HDRip Malayalam Movie';\n          } else if (hrefLower.includes('grrr-2024-telugu')) {\n            movieTitle = 'Grrr (2024) HDRip Telugu Movie';\n          } else if (hrefLower.includes('grrr-2024-tamil')) {\n            movieTitle = 'Grrr (2024) HDRip Tamil Movie';\n          }\n        }\n        \n        // Final validation\n        if (movieTitle && movieTitle.toLowerCase().includes(query)) {\n          // Extract year\n          const yearMatch = movieTitle.match(/\\b(19|20)\\d{2}\\b/);\n          const year = yearMatch ? yearMatch[0] : 'N/A';\n          \n          // Make URL absolute\n          const moviePageUrl = linkHref.startsWith('http') ? linkHref : baseUrl + (linkHref.startsWith('/') ? linkHref : '/' + linkHref);\n          \n          // Extract quality and language\n          const qualityMatch = movieTitle.match(/\\b(HD|HDRip|BRRip|BluRay|DVDRip|CAM|TS|WebRip|720p|1080p|4K)\\b/i);\n          const languageMatch = movieTitle.match(/\\b(Hindi|English|Tamil|Telugu|Malayalam|Kannada|Bengali|Punjabi|Marathi)\\b/i);\n          \n          const movie = {\n            title: movieTitle,\n            url: moviePageUrl,\n            source: '5movierulz',\n            year: year,\n            poster: posterUrl,\n            quality: qualityMatch ? qualityMatch[0] : 'Unknown',\n            language: languageMatch ? languageMatch[0] : 'Unknown',\n            rank: movies.length + 1\n          };\n          \n          // Check for duplicates\n          const isDuplicate = movies.some(existing => existing.url === movie.url);\n          if (!isDuplicate) {\n            movies.push(movie);\n            console.log(`✅ Added: ${movieTitle}`);\n          }\n        }\n      }\n      \n    } catch (e) {\n      console.log(`❌ Error processing film element ${i+1}: ${e.message}`);\n      continue;\n    }\n  }\n  \n  console.log(`🎯 Total unique movies found: ${movies.length}`);\n  \n  if (movies.length === 0) {\n    return [{ \n      error: 'No movies found in search results', \n      debug: {\n        htmlLength: html.length,\n        hasFilmElements: html.includes('class=\"film') || html.includes('class=\\\"film'),\n        queryUsed: query,\n        sampleHtml: html.substring(0, 1000)\n      }\n    }];\n  }\n  \n  // Return each movie as a separate item for processing\n  return movies;\n  \n} catch (error) {\n  const errorMessage = error instanceof Error ? error.message : String(error);\n  console.log('Error parsing movies:', errorMessage);\n  return [{ \n    error: 'Failed to parse movies: ' + errorMessage,\n    debug: {\n      htmlLength: html ? html.length : 0,\n      errorStack: error instanceof Error ? error.stack : 'No stack trace'\n    }\n  }];\n}"
      },
      "id": "8f8790ab-de80-4be4-86ec-d9884b7702d1",
      "name": "Parse Movierulz",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -448,
        64
      ]
    },
    {
      "parameters": {
        "url": "https://search_x.ibomma.foo/search.html",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "search",
              "value": "={{ $node['Extract Parameters'].json.query }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
            },
            {
              "name": "Accept",
              "value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8"
            },
            {
              "name": "Referer",
              "value": "https://search_x.ibomma.foo/"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "neverError": true
            }
          },
          "timeout": 30000
        }
      },
      "id": "91d6ab8c-5b5c-4a31-b146-0aeb07d69897",
      "name": "Fetch Ibomma",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        224,
        304
      ]
    },
    {
      "parameters": {
        "url": "https://www.5movierulz.villas/search_movies",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "s",
              "value": "={{ $node['Extract Parameters'].json.query }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "User-Agent",
              "value": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36"
            },
            {
              "name": "Accept",
              "value": "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8"
            },
            {
              "name": "Referer",
              "value": "https://www.5movierulz.villas/"
            }
          ]
        },
        "options": {
          "response": {
            "response": {
              "neverError": true
            }
          },
          "timeout": 30000
        }
      },
      "id": "f0645703-1e6e-4102-905c-03d0499eae54",
      "name": "Fetch Movierulz",
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.1,
      "position": [
        -672,
        64
      ]
    },
    {
      "parameters": {
        "values": {
          "string": [
            {
              "name": "query",
              "value": "={{ $json.body.query }}"
            }
          ]
        },
        "options": {}
      },
      "id": "54b92711-bb2c-412f-a8ad-79f630e19c16",
      "name": "Extract Parameters",
      "type": "n8n-nodes-base.set",
      "typeVersion": 1,
      "position": [
        -896,
        176
      ]
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "movie-scraper-villas",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "0380bfe6-0459-404f-be19-4a65bba668d3",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        -1120,
        192
      ],
      "webhookId": "movie-scraper-villas"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -224,
        64
      ],
      "id": "44a9dbdc-cbe4-4a77-828d-bb89217c237d",
      "name": "Loop Over Items"
    },
    {
      "parameters": {
        "url": "={{ $json.url }}",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        0,
        0
      ],
      "id": "40caab44-bcf8-4f98-b256-c082e026406c",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "jsCode": "const items = $input.all();\nconst results = [];\nlet count = -1;\n\nfor (const item of items) {\n  const rawHtml = item.json.data || item.json.body || '';\n  count++;\n\n  const movieData = {\n    title: $('Parse Movierulz').itemMatching(count),\n    streamingUrls: []\n  };\n\n  if (!rawHtml) {\n    results.push(movieData);\n    continue;\n  }\n\n  try {\n    // --- FIX STEP 1: Clean and repair broken URL lines (dynamic for any domain/path) ---\n    let html = rawHtml\n      .replace(/\\r/g, '\\n') // normalize carriage returns\n      // Merge any URL pattern followed by newline and an alphanumeric continuation\n      // Example: https://domain.com/v/\\nXYZ123 -> https://domain.com/v/ XYZ123\n      .replace(/(https?:\\/\\/[^\\s\"'<>]+\\/)\\s*([\\w?=&%-]{3,})/g, '$1 $2');\n\n    const streamingDomains = [\n      'streamlare.com',\n      'streamtape.com', 'streamtape.to', 'streamtape.net',\n      'doodstream.com', 'doodstream.co', 'dood.to', 'dood.la', 'dood.ws',\n      'mixdrop.co', 'mixdrop.to', 'mixdrop.sx', 'mixdrop.bz',\n      'upstream.to',\n      'streamwish.to', 'streamwish.com',\n      'filelions.to', 'filelions.com',\n      'vtube.to',\n      'vidsrc.me', 'vidsrc.to',\n      'embedsito.com',\n      'vidcloud.co', 'vidcloud9.com',\n      'uptostream.com',\n      'fembed.com', 'fembed.net',\n      'gounlimited.to',\n      'streamango.com',\n      'rapidvideo.com',\n      'clipwatching.com',\n      'vcdnlare.com',\n      'netu.tv',\n      'jetload.net',\n      'videobin.co',\n      'supervideo.tv',\n      'speedvideo.net',\n      'uperbox.io',\n      'cavanhabg.com',\n      'droplares.cc',\n      'taylorplayer.com'\n    ];\n\n    const foundUrls = new Set();\n\n    // Create regex for all known streaming domains\n    const domainPattern = streamingDomains.map(domain => domain.replace('.', '\\\\.')).join('|');\n    const streamingRegex = new RegExp(`https?:\\/\\/(?:[^\\\\s\"'<>]*\\\\.)?(${domainPattern})[^\\\\s\"'<>]*`, 'gi');\n\n    // Extract URLs matching streaming domains\n    const matches = html.match(streamingRegex);\n    if (matches) {\n      matches.forEach(url => {\n        if (url.length > 10) foundUrls.add(url.trim());\n      });\n    }\n\n    // Extract iframe URLs\n    const iframeMatches = html.match(/<iframe[^>]+src=[\"']([^\"']+)[\"'][^>]*>/gi);\n    if (iframeMatches) {\n      iframeMatches.forEach(iframe => {\n        const srcMatch = iframe.match(/src=[\"']([^\"']+)[\"']/i);\n        if (srcMatch && srcMatch[1]) {\n          let url = srcMatch[1];\n          if (url.startsWith('//')) url = 'https:' + url;\n          if (streamingDomains.some(domain => url.toLowerCase().includes(domain))) {\n            foundUrls.add(url.trim());\n          }\n        }\n      });\n    }\n\n    // Extract anchor URLs\n    const linkMatches = html.match(/<a[^>]+href=[\"']([^\"']+)[\"'][^>]*>/gi);\n    if (linkMatches) {\n      linkMatches.forEach(link => {\n        const hrefMatch = link.match(/href=[\"']([^\"']+)[\"']/i);\n        if (hrefMatch && hrefMatch[1]) {\n          let url = hrefMatch[1];\n          if (url.startsWith('//')) url = 'https:' + url;\n          if (streamingDomains.some(domain => url.toLowerCase().includes(domain))) {\n            foundUrls.add(url.trim());\n          }\n        }\n      });\n    }\n\n    // Extract quoted URLs\n    const quotedUrlMatches = html.match(/[\"']https?:\\/\\/[^\"']+[\"']/gi);\n    if (quotedUrlMatches) {\n      quotedUrlMatches.forEach(quotedUrl => {\n        const url = quotedUrl.replace(/[\"']/g, '');\n        if (streamingDomains.some(domain => url.toLowerCase().includes(domain))) {\n          foundUrls.add(url.trim());\n        }\n      });\n    }\n\n    // Extract JS variable URLs\n    const jsVarMatches = html.match(/(?:var|let|const|=)\\s*[^=]*=\\s*[\"']([^\"']*(?:streamlare|streamtape|doodstream|mixdrop|upstream|streamwish|filelions|vtube|vidsrc|embedsito|vidcloud|uptostream)[^\"']*)[\"']/gi);\n    if (jsVarMatches) {\n      jsVarMatches.forEach(jsVar => {\n        const urlMatch = jsVar.match(/[\"']([^\"']*(?:streamlare|streamtape|doodstream|mixdrop|upstream|streamwish|filelions|vtube|vidsrc|embedsito|vidcloud|uptostream)[^\"']*)[\"']/i);\n        if (urlMatch && urlMatch[1]) {\n          let url = urlMatch[1];\n          if (url.startsWith('//')) url = 'https:' + url;\n          if (url.startsWith('http')) foundUrls.add(url.trim());\n        }\n      });\n    }\n\n    // --- FIX STEP 2: Clean + remove broken duplicates dynamically ---\n    let urls = Array.from(foundUrls)\n      .map(u => u.replace(/\\s{2,}/g, ' ').trim())\n      .filter(u => u.startsWith('http'));\n\n    const cleaned = [];\n    urls.forEach(u => {\n      const baseMatch = u.match(/(https?:\\/\\/[^\"'\\s]+\\/(?:v|e|embed|player|watch)\\/)/i);\n      const base = baseMatch ? baseMatch[1] : null;\n\n      // Skip base-only URLs if a longer one exists\n      if (base) {\n        const hasLonger = urls.some(x => x.startsWith(base) && x.length > base.length + 2);\n        if (hasLonger && u.trim() === base.trim()) return;\n      }\n      cleaned.push(u);\n    });\n\n    // --- FIX STEP 3: Sort for readability ---\n    const sorted = cleaned.sort((a, b) => {\n      const domainA = a.match(/\\/\\/([^/]+)/)?.[1] || '';\n      const domainB = b.match(/\\/\\/([^/]+)/)?.[1] || '';\n      return domainA.localeCompare(domainB);\n    });\n\n    movieData.streamingUrls = sorted;\n\n    console.log(`✅ ${movieData.title}:`, sorted);\n\n  } catch (error) {\n    console.error('❌ Error parsing HTML for:', movieData.title, error);\n  }\n\n  results.push(movieData);\n}\n\nreturn results;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        224,
        64
      ],
      "id": "20eb0004-fc20-4db0-9e7a-9674ba7d0d23",
      "name": "Fetch each Movie"
    },
    {
      "parameters": {
        "jsCode": "// Transform accumulated results from the completed loop\nconst items = $input.all(); // Get all accumulated items from the loop\nconst transformedItems = [];\n\nconsole.log(`Column Structure received ${items.length} items from completed loop`);\n\nfor (const item of items) {\n  try {\n    // The item structure comes from \"Fetch each Movie\" node\n    // Each item should have the movie data and streamingUrls\n    const movieData = item.json.title?.json || {};\n    const streamingUrls = item.json.streamingUrls || [];\n    \n    // Create the output object with all required columns\n    const transformedItem = {\n      title: movieData.title || 'Unknown',\n      url: movieData.url || '',\n      source: movieData.source || '',\n      year: movieData.year || '',\n      poster: movieData.poster || '',\n      quality: movieData.quality || '',\n      language: movieData.language || '',\n      streamingUrls: streamingUrls\n    };\n    \n    console.log('Transformed item:', transformedItem.title, 'with', streamingUrls.length, 'streaming URLs');\n    transformedItems.push(transformedItem);\n    \n  } catch (error) {\n    console.error('Error transforming item:', error, 'Item data:', JSON.stringify(item, null, 2));\n    // Add a default item in case of error\n    transformedItems.push({\n      title: 'Error',\n      url: '',\n      source: '',\n      year: '',\n      poster: '',\n      quality: '',\n      language: '',\n      streamingUrls: []\n    });\n  }\n}\n\nconsole.log(`Column Structure processed ${transformedItems.length} total items`);\nreturn transformedItems;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        448,
        64
      ],
      "id": "5f015190-7432-4d35-b5dc-13ddd6057c45",
      "name": "Column Structure"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ {\n  \"query\": $('Extract Parameters').first().json.query,\n  \"sources\": [\"5movierulz.villas\", \"ibomma.foo\"],\n  \"results\": [\n    ...$('Column Structure').all().map(movie => ({\n      \"title\": movie.json.title,\n      \"url\": movie.json.url,\n      \"source\": movie.json.source,\n      \"year\": movie.json.year,\n      \"poster\": movie.json.poster,\n      \"quality\": movie.json.quality,\n      \"language\": movie.json.language,\n      \"streamingUrls\": movie.json.streamingUrls,\n      \"rank\": movie.json.rank\n    })),\n    ...$('Parse Ibomma').all().map(movie => ({\n      \"title\": movie.json.title,\n      \"url\": movie.json.url,\n      \"source\": movie.json.source,\n      \"year\": movie.json.year,\n      \"poster\": movie.json.poster,\n      \"quality\": movie.json.quality || \"\",\n      \"language\": movie.json.language,\n      \"streamingUrls\": movie.json.streamingUrls || [],\n      \"rank\": movie.json.rank\n    }))\n  ]\n} }}",
        "options": {}
      },
      "id": "89e5b3aa-e448-4552-ad88-cca0f876cd42",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        896,
        176
      ]
    }
  ],
  "pinData": {
    "Webhook Trigger": [
      {
        "json": {
          "headers": {
            "host": "n8n-instance-vnyx.onrender.com",
            "user-agent": "Movie-Search-UI/1.0",
            "content-length": "15",
            "accept": "application/json",
            "accept-encoding": "gzip, br",
            "accept-language": "*",
            "cdn-loop": "cloudflare; loops=1",
            "cf-connecting-ip": "98.92.93.232",
            "cf-ipcountry": "US",
            "cf-ray": "99204b5f4af8553b-IAD",
            "cf-visitor": "{\"scheme\":\"https\"}",
            "content-type": "application/json",
            "render-proxy-ttl": "4",
            "rndr-id": "b8a73895-b98e-4d33",
            "sec-fetch-mode": "cors",
            "true-client-ip": "98.92.93.232",
            "x-forwarded-for": "98.92.93.232, 172.70.34.134, 10.214.80.209",
            "x-forwarded-proto": "https",
            "x-request-start": "1761044879470577",
            "x-vercel-id": "bom1::bw2xh-1761044879111-20977d014cfe"
          },
          "params": {},
          "query": {},
          "body": {
            "query": "rrr"
          },
          "webhookUrl": "http://localhost:5678/webhook/movie-scraper-villas",
          "executionMode": "production"
        }
      }
    ]
  },
  "connections": {
    "Merge Results": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Ibomma": {
      "main": [
        [
          {
            "node": "Merge Results",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Parse Movierulz": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Ibomma": {
      "main": [
        [
          {
            "node": "Parse Ibomma",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Movierulz": {
      "main": [
        [
          {
            "node": "Parse Movierulz",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Parameters": {
      "main": [
        [
          {
            "node": "Fetch Ibomma",
            "type": "main",
            "index": 0
          },
          {
            "node": "Fetch Movierulz",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook Trigger": {
      "main": [
        [
          {
            "node": "Extract Parameters",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop Over Items": {
      "main": [
        [
          {
            "node": "Column Structure",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Fetch each Movie",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch each Movie": {
      "main": [
        [
          {
            "node": "Loop Over Items",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Column Structure": {
      "main": [
        [
          {
            "node": "Merge Results",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1",
    "callerPolicy": "workflowsFromSameOwner"
  },
  "versionId": "2862c5c4-c5fb-497b-80db-08eeb7f9eb63",
  "meta": {
    "instanceId": "6db0477b567a3c12266a02572a4e032e65f37c4b9681b7e606e8d9b5e50a1293"
  },
  "id": "JcsH9ofxkOZfcj9T",
  "tags": []
}
