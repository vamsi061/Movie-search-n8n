{
  "name": "Movie Downloader Workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "movie-downloader",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "f8b0c0e2-8b7a-4c5d-9e3f-1a2b3c4d5e6f",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        240,
        300
      ],
      "webhookId": "movie-downloader"
    },
    {
      "parameters": {
        "functionCode": "// Extract movie download request data from webhook\n// Handle both direct JSON and nested body structure\nlet requestData = $json;\n\n// If data is nested in body, extract it\nif ($json.body && typeof $json.body === 'string') {\n  try {\n    requestData = JSON.parse($json.body);\n  } catch (e) {\n    requestData = $json.body;\n  }\n} else if ($json.body && typeof $json.body === 'object') {\n  requestData = $json.body;\n}\n\n// Extract the actual data\nconst movieUrl = requestData.movieUrl || $json.movieUrl;\nconst title = requestData.title || $json.title || 'Unknown Movie';\nconst action = requestData.action || $json.action || 'download';\nconst outputFormat = requestData.outputFormat || $json.outputFormat || 'mp4';\n\nconsole.log('Received webhook data:', JSON.stringify($json, null, 2));\nconsole.log('Extracted movieUrl:', movieUrl);\nconsole.log('Extracted title:', title);\n\n// Validate input\nif (!movieUrl) {\n  console.log('Available data keys:', Object.keys($json));\n  throw new Error(`Movie URL is required. Received data: ${JSON.stringify($json)}`);\n}\n\n// Check if URL is from supported sources\nconst supportedSources = ['ibomma', '5movierulz', 'movierulz'];\nconst isSupported = supportedSources.some(source => \n  movieUrl.toLowerCase().includes(source)\n);\n\nif (!isSupported) {\n  throw new Error('Download is only supported for iBomma and MovieRulz sources');\n}\n\n// Prepare Python script execution parameters\nconst pythonScriptPath = '/Users/vamsi/Desktop/Movie_Agent/github_dir/video_extraction/simple_video_extractor.py';\nconst cleanTitle = title.replace(/[^a-zA-Z0-9\\s]/g, '').replace(/\\s+/g, '_');\nconst outputFileName = `${cleanTitle}.${outputFormat}`;\n\nreturn {\n  movieUrl,\n  title,\n  action,\n  outputFormat,\n  pythonScriptPath,\n  outputFileName,\n  timestamp: new Date().toISOString(),\n  status: 'initialized',\n  debug: {\n    originalData: $json,\n    extractedData: requestData\n  }\n};"
      },
      "id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
      "name": "Process Request",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "import requests\nimport subprocess\nimport sys\nimport os\n\n# Get the movie data from the previous node\nmovie_url = _input.first()['json']['movieUrl']\ntitle = _input.first()['json']['title']\noutput_filename = _input.first()['json']['outputFileName']\n\nprint(f\"Starting download for: {title}\")\nprint(f\"URL: {movie_url}\")\nprint(f\"Output: {output_filename}\")\n\n# Download the Python script from GitHub\nscript_url = 'https://raw.githubusercontent.com/vamsi061/Movie-search-n8n/main/scripts/simple_video_extractor.py'\nresponse = requests.get(script_url)\n\nif response.status_code == 200:\n    # Save the script to a temporary file\n    script_path = '/tmp/simple_video_extractor.py'\n    with open(script_path, 'w') as f:\n        f.write(response.text)\n    \n    print(\"Script downloaded successfully\")\n    \n    # Execute the script\n    try:\n        result = subprocess.run([\n            sys.executable, script_path, \n            movie_url, \n            '--download', \n            '--output', output_filename\n        ], capture_output=True, text=True, timeout=300)\n        \n        stdout = result.stdout\n        stderr = result.stderr\n        exit_code = result.returncode\n        \n        print(f\"Script execution completed with exit code: {exit_code}\")\n        print(f\"STDOUT: {stdout}\")\n        if stderr:\n            print(f\"STDERR: {stderr}\")\n        \n        return {\n            'status': 'completed' if exit_code == 0 else 'error',\n            'exit_code': exit_code,\n            'stdout': stdout,\n            'stderr': stderr,\n            'movie_url': movie_url,\n            'title': title,\n            'output_filename': output_filename\n        }\n        \n    except subprocess.TimeoutExpired:\n        return {\n            'status': 'error',\n            'message': 'Download timeout after 5 minutes',\n            'movie_url': movie_url,\n            'title': title\n        }\n    except Exception as e:\n        return {\n            'status': 'error',\n            'message': f'Execution error: {str(e)}',\n            'movie_url': movie_url,\n            'title': title\n        }\nelse:\n    return {\n        'status': 'error',\n        'message': f'Failed to download script from GitHub: {response.status_code}',\n        'movie_url': movie_url,\n        'title': title\n    }"
      },
      "id": "b2c3d4e5-f6g7-8901-bcde-f23456789012",
      "name": "Execute Python Download",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        680,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "// Process the Python Code node output\nconst result = $json;\n\n// Check if we already have a processed result from Python Code node\nif (result.status) {\n  // Result is already processed by Python Code node\n  const stdout = result.stdout || '';\n  const stderr = result.stderr || '';\n  const exitCode = result.exit_code || 0;\n  \n  // Parse progress information from stdout\n  const lines = stdout.split('\\n').filter(line => line.trim());\n  const progressInfo = [];\n  let fileSize = null;\n  let downloadProgress = null;\n  \n  // Extract useful information from output\n  lines.forEach(line => {\n    // Extract file size information\n    const sizeMatch = line.match(/File size: ([\\d.]+) MB \\(([\\d,]+) bytes\\)/);\n    if (sizeMatch) {\n      fileSize = {\n        mb: parseFloat(sizeMatch[1]),\n        bytes: parseInt(sizeMatch[2].replace(/,/g, ''))\n      };\n    }\n    \n    // Extract progress information\n    const progressMatch = line.match(/Progress: ([\\d.]+)% \\(([\\d.]+)\\/([\\d.]+) MB\\)/);\n    if (progressMatch) {\n      downloadProgress = {\n        percentage: parseFloat(progressMatch[1]),\n        downloadedMB: parseFloat(progressMatch[2]),\n        totalMB: parseFloat(progressMatch[3])\n      };\n    }\n    \n    // Add line to progress info\n    if (line.trim()) {\n      progressInfo.push({\n        message: line.trim(),\n        timestamp: new Date().toISOString()\n      });\n    }\n  });\n  \n  // Include stderr if there are errors\n  if (stderr && stderr.trim()) {\n    progressInfo.push({\n      message: `Error: ${stderr.trim()}`,\n      timestamp: new Date().toISOString(),\n      type: 'error'\n    });\n  }\n  \n  return {\n    status: result.status,\n    message: result.message || (result.status === 'completed' ? 'Movie downloaded successfully' : 'Download failed'),\n    exitCode: exitCode,\n    fileSize,\n    downloadProgress,\n    progressInfo,\n    stdout: stdout.substring(0, 1000), // Limit stdout size\n    stderr: stderr.substring(0, 500),  // Limit stderr size\n    timestamp: new Date().toISOString(),\n    movieUrl: result.movie_url,\n    title: result.title,\n    outputFileName: result.output_filename\n  };\n} else {\n  // Fallback for unexpected format\n  return {\n    status: 'error',\n    message: 'Unexpected response format from Python execution',\n    timestamp: new Date().toISOString(),\n    rawResult: result\n  };\n}"
      },
      "id": "c3d4e5f6-g7h8-9012-cdef-345678901234",
      "name": "Process Download Result",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        900,
        300
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}"
      },
      "id": "d4e5f6g7-h8i9-0123-defg-456789012345",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1120,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "// Handle errors and send error response\nconst error = $json.error || 'Unknown error occurred';\nconst movieUrl = $('Process Request').item?.json?.movieUrl || 'Unknown';\nconst title = $('Process Request').item?.json?.title || 'Unknown';\n\nreturn {\n  status: 'error',\n  message: `Download failed: ${error}`,\n  error: error,\n  movieUrl,\n  title,\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "e5f6g7h8-i9j0-1234-efgh-567890123456",
      "name": "Handle Error",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        900,
        480
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}"
      },
      "id": "f6g7h8i9-j0k1-2345-fghi-678901234567",
      "name": "Respond with Error",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1120,
        480
      ]
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Process Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Request": {
      "main": [
        [
          {
            "node": "Execute Python Download",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Python Download": {
      "main": [
        [
          {
            "node": "Process Download Result",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Handle Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Download Result": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle Error": {
      "main": [
        [
          {
            "node": "Respond with Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {},
  "versionId": "1.0.0",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "id": "movie-downloader-workflow",
  "tags": []
}