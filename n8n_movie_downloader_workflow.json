{
  "name": "Movie Downloader Workflow",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "movie-downloader",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "f8b0c0e2-8b7a-4c5d-9e3f-1a2b3c4d5e6f",
      "name": "Webhook",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [
        240,
        300
      ],
      "webhookId": "movie-downloader"
    },
    {
      "parameters": {
        "functionCode": "// Extract movie download request data\nconst movieUrl = $json.movieUrl;\nconst title = $json.title || 'Unknown Movie';\nconst action = $json.action || 'download';\nconst outputFormat = $json.outputFormat || 'mp4';\n\n// Validate input\nif (!movieUrl) {\n  throw new Error('Movie URL is required');\n}\n\n// Check if URL is from supported sources\nconst supportedSources = ['ibomma', '5movierulz', 'movierulz'];\nconst isSupported = supportedSources.some(source => \n  movieUrl.toLowerCase().includes(source)\n);\n\nif (!isSupported) {\n  throw new Error('Download is only supported for iBomma and MovieRulz sources');\n}\n\n// Prepare Python script execution parameters\nconst pythonScriptPath = '/Users/vamsi/Desktop/Movie_Agent/github_dir/video_extraction/simple_video_extractor.py';\nconst outputFileName = `${title.replace(/[^a-zA-Z0-9]/g, '_')}.${outputFormat}`;\n\nreturn {\n  movieUrl,\n  title,\n  action,\n  outputFormat,\n  pythonScriptPath,\n  outputFileName,\n  timestamp: new Date().toISOString(),\n  status: 'initialized'\n};"
      },
      "id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
      "name": "Process Request",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        460,
        300
      ]
    },
    {
      "parameters": {
        "command": "python3 {{ $json.pythonScriptPath }} \"{{ $json.movieUrl }}\" --download --output \"{{ $json.outputFileName }}\"",
        "options": {
          "cwd": "/Users/vamsi/Desktop/Movie_Agent/github_dir/video_extraction/"
        }
      },
      "id": "b2c3d4e5-f6g7-8901-bcde-f23456789012",
      "name": "Execute Python Download",
      "type": "n8n-nodes-base.executeCommand",
      "typeVersion": 1,
      "position": [
        680,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "// Process the Python script output\nconst stdout = $json.stdout || '';\nconst stderr = $json.stderr || '';\nconst exitCode = $json.exitCode || 0;\n\n// Parse progress information from stdout\nconst lines = stdout.split('\\n').filter(line => line.trim());\nconst progressInfo = [];\nlet fileSize = null;\nlet downloadProgress = null;\nlet finalStatus = 'unknown';\n\n// Extract useful information from output\nlines.forEach(line => {\n  // Extract file size information\n  const sizeMatch = line.match(/File size: ([\\d.]+) MB \\(([\\d,]+) bytes\\)/);\n  if (sizeMatch) {\n    fileSize = {\n      mb: parseFloat(sizeMatch[1]),\n      bytes: parseInt(sizeMatch[2].replace(/,/g, ''))\n    };\n  }\n  \n  // Extract progress information\n  const progressMatch = line.match(/Progress: ([\\d.]+)% \\(([\\d.]+)\\/([\\d.]+) MB\\)/);\n  if (progressMatch) {\n    downloadProgress = {\n      percentage: parseFloat(progressMatch[1]),\n      downloadedMB: parseFloat(progressMatch[2]),\n      totalMB: parseFloat(progressMatch[3])\n    };\n  }\n  \n  // Check for completion\n  if (line.includes('Download completed')) {\n    finalStatus = 'completed';\n  } else if (line.includes('failed') || line.includes('error')) {\n    finalStatus = 'error';\n  }\n  \n  // Add line to progress info\n  progressInfo.push({\n    message: line.trim(),\n    timestamp: new Date().toISOString()\n  });\n});\n\n// Determine overall status\nlet status = 'completed';\nlet message = 'Download completed successfully';\n\nif (exitCode !== 0) {\n  status = 'error';\n  message = `Download failed with exit code ${exitCode}`;\n} else if (finalStatus === 'error') {\n  status = 'error';\n  message = 'Download failed during execution';\n} else if (finalStatus === 'completed') {\n  status = 'completed';\n  message = 'Movie downloaded successfully';\n}\n\n// Include stderr if there are errors\nif (stderr && stderr.trim()) {\n  progressInfo.push({\n    message: `Error: ${stderr.trim()}`,\n    timestamp: new Date().toISOString(),\n    type: 'error'\n  });\n}\n\nreturn {\n  status,\n  message,\n  exitCode,\n  fileSize,\n  downloadProgress,\n  progressInfo,\n  stdout: stdout.substring(0, 1000), // Limit stdout size\n  stderr: stderr.substring(0, 500),  // Limit stderr size\n  timestamp: new Date().toISOString(),\n  movieUrl: $('Process Request').item.json.movieUrl,\n  title: $('Process Request').item.json.title,\n  outputFileName: $('Process Request').item.json.outputFileName\n};"
      },
      "id": "c3d4e5f6-g7h8-9012-cdef-345678901234",
      "name": "Process Download Result",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        900,
        300
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}"
      },
      "id": "d4e5f6g7-h8i9-0123-defg-456789012345",
      "name": "Respond to Webhook",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1120,
        300
      ]
    },
    {
      "parameters": {
        "functionCode": "// Handle errors and send error response\nconst error = $json.error || 'Unknown error occurred';\nconst movieUrl = $('Process Request').item?.json?.movieUrl || 'Unknown';\nconst title = $('Process Request').item?.json?.title || 'Unknown';\n\nreturn {\n  status: 'error',\n  message: `Download failed: ${error}`,\n  error: error,\n  movieUrl,\n  title,\n  timestamp: new Date().toISOString()\n};"
      },
      "id": "e5f6g7h8-i9j0-1234-efgh-567890123456",
      "name": "Handle Error",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [
        900,
        480
      ]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{ $json }}"
      },
      "id": "f6g7h8i9-j0k1-2345-fghi-678901234567",
      "name": "Respond with Error",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [
        1120,
        480
      ]
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Process Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Request": {
      "main": [
        [
          {
            "node": "Execute Python Download",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Execute Python Download": {
      "main": [
        [
          {
            "node": "Process Download Result",
            "type": "main",
            "index": 0
          }
        ]
      ],
      "error": [
        [
          {
            "node": "Handle Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Download Result": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Handle Error": {
      "main": [
        [
          {
            "node": "Respond with Error",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {},
  "versionId": "1.0.0",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "id": "movie-downloader-workflow",
  "tags": []
}